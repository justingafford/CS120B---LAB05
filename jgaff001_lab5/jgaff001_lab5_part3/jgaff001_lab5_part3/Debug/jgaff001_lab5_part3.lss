
jgaff001_lab5_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000020e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000896  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cd  00000000  00000000  00000b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030f  00000000  00000000  0000130b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  0000161c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046f  00000000  00000000  00001650  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001abf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4e c0       	rjmp	.+156    	; 0x9e <__ctors_end>
   2:	00 00       	nop
   4:	5c c0       	rjmp	.+184    	; 0xbe <__bad_interrupt>
   6:	00 00       	nop
   8:	5a c0       	rjmp	.+180    	; 0xbe <__bad_interrupt>
   a:	00 00       	nop
   c:	58 c0       	rjmp	.+176    	; 0xbe <__bad_interrupt>
   e:	00 00       	nop
  10:	56 c0       	rjmp	.+172    	; 0xbe <__bad_interrupt>
  12:	00 00       	nop
  14:	54 c0       	rjmp	.+168    	; 0xbe <__bad_interrupt>
  16:	00 00       	nop
  18:	52 c0       	rjmp	.+164    	; 0xbe <__bad_interrupt>
  1a:	00 00       	nop
  1c:	50 c0       	rjmp	.+160    	; 0xbe <__bad_interrupt>
  1e:	00 00       	nop
  20:	4e c0       	rjmp	.+156    	; 0xbe <__bad_interrupt>
  22:	00 00       	nop
  24:	4c c0       	rjmp	.+152    	; 0xbe <__bad_interrupt>
  26:	00 00       	nop
  28:	4a c0       	rjmp	.+148    	; 0xbe <__bad_interrupt>
  2a:	00 00       	nop
  2c:	48 c0       	rjmp	.+144    	; 0xbe <__bad_interrupt>
  2e:	00 00       	nop
  30:	46 c0       	rjmp	.+140    	; 0xbe <__bad_interrupt>
  32:	00 00       	nop
  34:	44 c0       	rjmp	.+136    	; 0xbe <__bad_interrupt>
  36:	00 00       	nop
  38:	42 c0       	rjmp	.+132    	; 0xbe <__bad_interrupt>
  3a:	00 00       	nop
  3c:	40 c0       	rjmp	.+128    	; 0xbe <__bad_interrupt>
  3e:	00 00       	nop
  40:	3e c0       	rjmp	.+124    	; 0xbe <__bad_interrupt>
  42:	00 00       	nop
  44:	3c c0       	rjmp	.+120    	; 0xbe <__bad_interrupt>
  46:	00 00       	nop
  48:	3a c0       	rjmp	.+116    	; 0xbe <__bad_interrupt>
  4a:	00 00       	nop
  4c:	38 c0       	rjmp	.+112    	; 0xbe <__bad_interrupt>
  4e:	00 00       	nop
  50:	36 c0       	rjmp	.+108    	; 0xbe <__bad_interrupt>
  52:	00 00       	nop
  54:	34 c0       	rjmp	.+104    	; 0xbe <__bad_interrupt>
  56:	00 00       	nop
  58:	32 c0       	rjmp	.+100    	; 0xbe <__bad_interrupt>
  5a:	00 00       	nop
  5c:	30 c0       	rjmp	.+96     	; 0xbe <__bad_interrupt>
  5e:	00 00       	nop
  60:	2e c0       	rjmp	.+92     	; 0xbe <__bad_interrupt>
  62:	00 00       	nop
  64:	2c c0       	rjmp	.+88     	; 0xbe <__bad_interrupt>
  66:	00 00       	nop
  68:	2a c0       	rjmp	.+84     	; 0xbe <__bad_interrupt>
  6a:	00 00       	nop
  6c:	28 c0       	rjmp	.+80     	; 0xbe <__bad_interrupt>
  6e:	00 00       	nop
  70:	26 c0       	rjmp	.+76     	; 0xbe <__bad_interrupt>
  72:	00 00       	nop
  74:	24 c0       	rjmp	.+72     	; 0xbe <__bad_interrupt>
  76:	00 00       	nop
  78:	22 c0       	rjmp	.+68     	; 0xbe <__bad_interrupt>
  7a:	00 00       	nop
  7c:	20 c0       	rjmp	.+64     	; 0xbe <__bad_interrupt>
  7e:	00 00       	nop
  80:	1e c0       	rjmp	.+60     	; 0xbe <__bad_interrupt>
  82:	00 00       	nop
  84:	1c c0       	rjmp	.+56     	; 0xbe <__bad_interrupt>
  86:	00 00       	nop
  88:	1a c0       	rjmp	.+52     	; 0xbe <__bad_interrupt>
  8a:	00 00       	nop
  8c:	6b 00       	.word	0x006b	; ????
  8e:	6f 00       	.word	0x006f	; ????
  90:	75 00       	.word	0x0075	; ????
  92:	7b 00       	.word	0x007b	; ????
  94:	81 00       	.word	0x0081	; ????
  96:	87 00       	.word	0x0087	; ????
  98:	8d 00       	.word	0x008d	; ????
  9a:	93 00       	.word	0x0093	; ????
  9c:	99 00       	.word	0x0099	; ????

0000009e <__ctors_end>:
  9e:	11 24       	eor	r1, r1
  a0:	1f be       	out	0x3f, r1	; 63
  a2:	cf ef       	ldi	r28, 0xFF	; 255
  a4:	d0 e4       	ldi	r29, 0x40	; 64
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_clear_bss>:
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	a0 e0       	ldi	r26, 0x00	; 0
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
  b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
  b4:	a1 30       	cpi	r26, 0x01	; 1
  b6:	b2 07       	cpc	r27, r18
  b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>
  ba:	5a d0       	rcall	.+180    	; 0x170 <main>
  bc:	6c c0       	rjmp	.+216    	; 0x196 <_exit>

000000be <__bad_interrupt>:
  be:	a0 cf       	rjmp	.-192    	; 0x0 <__vectors>

000000c0 <light_show>:
enum states {Init, blank, buttonpress, display1,buttonpress1,display2,buttonpress2,display3,buttonpress3} state;
	
#define buttonPressed (PINA & 0x01)

void light_show () {
	switch(state) {
  c0:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
  c4:	8e 2f       	mov	r24, r30
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	89 30       	cpi	r24, 0x09	; 9
  ca:	91 05       	cpc	r25, r1
  cc:	c0 f5       	brcc	.+112    	; 0x13e <light_show+0x7e>
  ce:	fc 01       	movw	r30, r24
  d0:	ea 5b       	subi	r30, 0xBA	; 186
  d2:	ff 4f       	sbci	r31, 0xFF	; 255
  d4:	57 c0       	rjmp	.+174    	; 0x184 <__tablejump2__>
	case Init:
		state = blank;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		break;
  dc:	33 c0       	rjmp	.+102    	; 0x144 <light_show+0x84>
	case blank:
		if(buttonPressed) {
  de:	00 9b       	sbis	0x00, 0	; 0
  e0:	31 c0       	rjmp	.+98     	; 0x144 <light_show+0x84>
			state = buttonpress;
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  e8:	2f c0       	rjmp	.+94     	; 0x148 <light_show+0x88>
		else {
			state = blank;
		}
		break;
	case buttonpress:
		if (buttonPressed) {
  ea:	00 99       	sbic	0x00, 0	; 0
  ec:	2d c0       	rjmp	.+90     	; 0x148 <light_show+0x88>
			state = buttonpress;
		}
		else {
			state = display1;
  ee:	83 e0       	ldi	r24, 0x03	; 3
  f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  f4:	2c c0       	rjmp	.+88     	; 0x14e <light_show+0x8e>
		}
		break;
	case display1:
		if (buttonPressed) {
  f6:	00 9b       	sbis	0x00, 0	; 0
  f8:	2a c0       	rjmp	.+84     	; 0x14e <light_show+0x8e>
			state = buttonpress1;
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 100:	29 c0       	rjmp	.+82     	; 0x154 <light_show+0x94>
		else {
			state = display1;
		}
		break;
	case buttonpress1:
		if (buttonPressed) {
 102:	00 99       	sbic	0x00, 0	; 0
 104:	27 c0       	rjmp	.+78     	; 0x154 <light_show+0x94>
			state = buttonpress1;
		}
		else {
			state = display2;
 106:	85 e0       	ldi	r24, 0x05	; 5
 108:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 10c:	26 c0       	rjmp	.+76     	; 0x15a <light_show+0x9a>
		}
		break;
	case display2:
		if(buttonPressed) {
 10e:	00 9b       	sbis	0x00, 0	; 0
 110:	24 c0       	rjmp	.+72     	; 0x15a <light_show+0x9a>
			state = buttonpress2;
 112:	86 e0       	ldi	r24, 0x06	; 6
 114:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 118:	23 c0       	rjmp	.+70     	; 0x160 <light_show+0xa0>
		else {
			state = display2;
		}
		break;
	case buttonpress2:
		if(buttonPressed) {
 11a:	00 99       	sbic	0x00, 0	; 0
 11c:	21 c0       	rjmp	.+66     	; 0x160 <light_show+0xa0>
			state = buttonpress2;
		}
		else {
			state = display3;
 11e:	87 e0       	ldi	r24, 0x07	; 7
 120:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 124:	20 c0       	rjmp	.+64     	; 0x166 <light_show+0xa6>
		}
		break;
	case display3:
		if(buttonPressed) {
 126:	00 9b       	sbis	0x00, 0	; 0
 128:	1e c0       	rjmp	.+60     	; 0x166 <light_show+0xa6>
			state = buttonpress3;
 12a:	88 e0       	ldi	r24, 0x08	; 8
 12c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 130:	1d c0       	rjmp	.+58     	; 0x16c <light_show+0xac>
		else {
			state = display3;
		}
		break;
	case buttonpress3:
		if (buttonPressed) {
 132:	00 99       	sbic	0x00, 0	; 0
 134:	1b c0       	rjmp	.+54     	; 0x16c <light_show+0xac>
			state = buttonpress3;
		}
		else {
			state = blank;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 13c:	03 c0       	rjmp	.+6      	; 0x144 <light_show+0x84>
		}
		break;
	default:
		state = Init;
 13e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			break;
		default:
			break;
		
	}
}
 142:	08 95       	ret
		state = Init;
		break;
	}
	switch(state) {
		case blank:
			PORTB = 0x00;
 144:	15 b8       	out	0x05, r1	; 5
			break;
 146:	08 95       	ret
		case buttonpress:
			PORTB = 0x2A;
 148:	8a e2       	ldi	r24, 0x2A	; 42
 14a:	85 b9       	out	0x05, r24	; 5
			break;
 14c:	08 95       	ret
		case display1:
			PORTB = 0x2A;
 14e:	8a e2       	ldi	r24, 0x2A	; 42
 150:	85 b9       	out	0x05, r24	; 5
			break;
 152:	08 95       	ret
		case buttonpress1:
			PORTB = 0x15;
 154:	85 e1       	ldi	r24, 0x15	; 21
 156:	85 b9       	out	0x05, r24	; 5
			break;
 158:	08 95       	ret
		case display2:
			PORTB = 0x15;
 15a:	85 e1       	ldi	r24, 0x15	; 21
 15c:	85 b9       	out	0x05, r24	; 5
			break;
 15e:	08 95       	ret
		case buttonpress2:
			PORTB = 0x3F;
 160:	8f e3       	ldi	r24, 0x3F	; 63
 162:	85 b9       	out	0x05, r24	; 5
			break;
 164:	08 95       	ret
		case display3:
			PORTB = 0x3F;
 166:	8f e3       	ldi	r24, 0x3F	; 63
 168:	85 b9       	out	0x05, r24	; 5
			break;
 16a:	08 95       	ret
		case buttonpress3:
			PORTB = 0x00;
 16c:	15 b8       	out	0x05, r1	; 5
 16e:	08 95       	ret

00000170 <main>:
	}
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; //inputs
 170:	11 b8       	out	0x01, r1	; 1
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; //outputs
 176:	84 b9       	out	0x04, r24	; 4
 178:	15 b8       	out	0x05, r1	; 5
	PORTB = 0x00;
 17a:	15 b8       	out	0x05, r1	; 5
	state = Init;
 17c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	while (1)
	{
		light_show();
 180:	9f df       	rcall	.-194    	; 0xc0 <light_show>
 182:	fe cf       	rjmp	.-4      	; 0x180 <main+0x10>

00000184 <__tablejump2__>:
 184:	ee 0f       	add	r30, r30
 186:	ff 1f       	adc	r31, r31
 188:	00 24       	eor	r0, r0
 18a:	00 1c       	adc	r0, r0
 18c:	0b be       	out	0x3b, r0	; 59
 18e:	07 90       	elpm	r0, Z+
 190:	f6 91       	elpm	r31, Z
 192:	e0 2d       	mov	r30, r0
 194:	09 94       	ijmp

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
