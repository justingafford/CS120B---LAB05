
jgaff001_lab5_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000023e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000023e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000890  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cd  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000035d  00000000  00000000  00001335  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001694  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000442  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001b0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
   2:	00 00       	nop
   4:	5b c0       	rjmp	.+182    	; 0xbc <__bad_interrupt>
   6:	00 00       	nop
   8:	59 c0       	rjmp	.+178    	; 0xbc <__bad_interrupt>
   a:	00 00       	nop
   c:	57 c0       	rjmp	.+174    	; 0xbc <__bad_interrupt>
   e:	00 00       	nop
  10:	55 c0       	rjmp	.+170    	; 0xbc <__bad_interrupt>
  12:	00 00       	nop
  14:	53 c0       	rjmp	.+166    	; 0xbc <__bad_interrupt>
  16:	00 00       	nop
  18:	51 c0       	rjmp	.+162    	; 0xbc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4f c0       	rjmp	.+158    	; 0xbc <__bad_interrupt>
  1e:	00 00       	nop
  20:	4d c0       	rjmp	.+154    	; 0xbc <__bad_interrupt>
  22:	00 00       	nop
  24:	4b c0       	rjmp	.+150    	; 0xbc <__bad_interrupt>
  26:	00 00       	nop
  28:	49 c0       	rjmp	.+146    	; 0xbc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	47 c0       	rjmp	.+142    	; 0xbc <__bad_interrupt>
  2e:	00 00       	nop
  30:	45 c0       	rjmp	.+138    	; 0xbc <__bad_interrupt>
  32:	00 00       	nop
  34:	43 c0       	rjmp	.+134    	; 0xbc <__bad_interrupt>
  36:	00 00       	nop
  38:	41 c0       	rjmp	.+130    	; 0xbc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3f c0       	rjmp	.+126    	; 0xbc <__bad_interrupt>
  3e:	00 00       	nop
  40:	3d c0       	rjmp	.+122    	; 0xbc <__bad_interrupt>
  42:	00 00       	nop
  44:	3b c0       	rjmp	.+118    	; 0xbc <__bad_interrupt>
  46:	00 00       	nop
  48:	39 c0       	rjmp	.+114    	; 0xbc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	37 c0       	rjmp	.+110    	; 0xbc <__bad_interrupt>
  4e:	00 00       	nop
  50:	35 c0       	rjmp	.+106    	; 0xbc <__bad_interrupt>
  52:	00 00       	nop
  54:	33 c0       	rjmp	.+102    	; 0xbc <__bad_interrupt>
  56:	00 00       	nop
  58:	31 c0       	rjmp	.+98     	; 0xbc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2f c0       	rjmp	.+94     	; 0xbc <__bad_interrupt>
  5e:	00 00       	nop
  60:	2d c0       	rjmp	.+90     	; 0xbc <__bad_interrupt>
  62:	00 00       	nop
  64:	2b c0       	rjmp	.+86     	; 0xbc <__bad_interrupt>
  66:	00 00       	nop
  68:	29 c0       	rjmp	.+82     	; 0xbc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	27 c0       	rjmp	.+78     	; 0xbc <__bad_interrupt>
  6e:	00 00       	nop
  70:	25 c0       	rjmp	.+74     	; 0xbc <__bad_interrupt>
  72:	00 00       	nop
  74:	23 c0       	rjmp	.+70     	; 0xbc <__bad_interrupt>
  76:	00 00       	nop
  78:	21 c0       	rjmp	.+66     	; 0xbc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1f c0       	rjmp	.+62     	; 0xbc <__bad_interrupt>
  7e:	00 00       	nop
  80:	1d c0       	rjmp	.+58     	; 0xbc <__bad_interrupt>
  82:	00 00       	nop
  84:	1b c0       	rjmp	.+54     	; 0xbc <__bad_interrupt>
  86:	00 00       	nop
  88:	19 c0       	rjmp	.+50     	; 0xbc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	6b 00       	.word	0x006b	; ????
  8e:	71 00       	.word	0x0071	; ????
  90:	75 00       	.word	0x0075	; ????
  92:	97 00       	.word	0x0097	; ????
  94:	9b 00       	.word	0x009b	; ????
  96:	9f 00       	.word	0x009f	; ????
  98:	af 00       	.word	0x00af	; ????
  9a:	bf 00       	.word	0x00bf	; ????

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf ef       	ldi	r28, 0xFF	; 255
  a2:	d0 e4       	ldi	r29, 0x40	; 64
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_clear_bss>:
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
  b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
  b2:	a1 30       	cpi	r26, 0x01	; 1
  b4:	b2 07       	cpc	r27, r18
  b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
  b8:	73 d0       	rcall	.+230    	; 0x1a0 <main>
  ba:	85 c0       	rjmp	.+266    	; 0x1c6 <_exit>

000000bc <__bad_interrupt>:
  bc:	a1 cf       	rjmp	.-190    	; 0x0 <__vectors>

000000be <increm_decrem>:

#define pin1 (PINA & 0x01)
#define pin2 (PINA & 0x02)

void increm_decrem() {
switch(state) {
  be:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
  c2:	8e 2f       	mov	r24, r30
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	88 30       	cpi	r24, 0x08	; 8
  c8:	91 05       	cpc	r25, r1
  ca:	08 f0       	brcs	.+2      	; 0xce <increm_decrem+0x10>
  cc:	5c c0       	rjmp	.+184    	; 0x186 <increm_decrem+0xc8>
  ce:	fc 01       	movw	r30, r24
  d0:	ea 5b       	subi	r30, 0xBA	; 186
  d2:	ff 4f       	sbci	r31, 0xFF	; 255
  d4:	6f c0       	rjmp	.+222    	; 0x1b4 <__tablejump2__>
case start:
state = init;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
state = start;
break;
}
switch(state) {
case init:
PORTC = 0x07;
  dc:	87 e0       	ldi	r24, 0x07	; 7
  de:	88 b9       	out	0x08, r24	; 8
break;
  e0:	08 95       	ret
switch(state) {
case start:
state = init;
break;
case init:
state = check;
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
break;
  e8:	08 95       	ret
case check:
if (!pin1 && !pin2) {
  ea:	00 99       	sbic	0x00, 0	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <increm_decrem+0x34>
  ee:	01 9b       	sbis	0x00, 1	; 0
  f0:	56 c0       	rjmp	.+172    	; 0x19e <increm_decrem+0xe0>
state = check;
}
else if (!pin1 && pin2) {
  f2:	00 99       	sbic	0x00, 0	; 0
  f4:	09 c0       	rjmp	.+18     	; 0x108 <increm_decrem+0x4a>
  f6:	01 9b       	sbis	0x00, 1	; 0
  f8:	07 c0       	rjmp	.+14     	; 0x108 <increm_decrem+0x4a>
state = decrem;
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
if (PORTC < 9) {
PORTC = PORTC + 1;
}
break;
case decrem:
if (PORTC > 0) {
 100:	88 b1       	in	r24, 0x08	; 8
 102:	81 11       	cpse	r24, r1
 104:	47 c0       	rjmp	.+142    	; 0x194 <increm_decrem+0xd6>
 106:	08 95       	ret
state = check;
}
else if (!pin1 && pin2) {
state = decrem;
}
else if (pin1 && !pin2) {
 108:	00 9b       	sbis	0x00, 0	; 0
 10a:	09 c0       	rjmp	.+18     	; 0x11e <increm_decrem+0x60>
 10c:	01 99       	sbic	0x00, 1	; 0
 10e:	07 c0       	rjmp	.+14     	; 0x11e <increm_decrem+0x60>
state = increm;
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
PORTC = 0x07;
break;
case check:
break;
case increm:
if (PORTC < 9) {
 116:	88 b1       	in	r24, 0x08	; 8
 118:	89 30       	cpi	r24, 0x09	; 9
 11a:	c0 f1       	brcs	.+112    	; 0x18c <increm_decrem+0xce>
 11c:	08 95       	ret
state = decrem;
}
else if (pin1 && !pin2) {
state = increm;
}
else if (pin1 && pin2) {
 11e:	00 9b       	sbis	0x00, 0	; 0
 120:	3e c0       	rjmp	.+124    	; 0x19e <increm_decrem+0xe0>
 122:	01 9b       	sbis	0x00, 1	; 0
 124:	3c c0       	rjmp	.+120    	; 0x19e <increm_decrem+0xe0>
state = reset;
 126:	87 e0       	ldi	r24, 0x07	; 7
 128:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 12c:	37 c0       	rjmp	.+110    	; 0x19c <increm_decrem+0xde>
}
break;
case increm:
state = wait;
 12e:	85 e0       	ldi	r24, 0x05	; 5
 130:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
break;
 134:	08 95       	ret
case decrem:
state = wait2;
 136:	86 e0       	ldi	r24, 0x06	; 6
 138:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
break;
 13c:	08 95       	ret
case wait:
if (pin1 && pin2) {
 13e:	00 9b       	sbis	0x00, 0	; 0
 140:	06 c0       	rjmp	.+12     	; 0x14e <increm_decrem+0x90>
 142:	01 9b       	sbis	0x00, 1	; 0
 144:	04 c0       	rjmp	.+8      	; 0x14e <increm_decrem+0x90>
state = reset;
 146:	87 e0       	ldi	r24, 0x07	; 7
 148:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 14c:	27 c0       	rjmp	.+78     	; 0x19c <increm_decrem+0xde>
}
else if (!pin1) {
 14e:	00 99       	sbic	0x00, 0	; 0
 150:	04 c0       	rjmp	.+8      	; 0x15a <increm_decrem+0x9c>
state = check;
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 158:	08 95       	ret
}
else if (pin1) {
 15a:	80 b1       	in	r24, 0x00	; 0
 15c:	08 95       	ret
state = wait;
}
break;
case wait2:
if (pin1 && pin2) {
 15e:	00 9b       	sbis	0x00, 0	; 0
 160:	06 c0       	rjmp	.+12     	; 0x16e <increm_decrem+0xb0>
 162:	01 9b       	sbis	0x00, 1	; 0
 164:	04 c0       	rjmp	.+8      	; 0x16e <increm_decrem+0xb0>
state = reset;
 166:	87 e0       	ldi	r24, 0x07	; 7
 168:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 16c:	17 c0       	rjmp	.+46     	; 0x19c <increm_decrem+0xde>
}
else if (!pin2) {
 16e:	01 99       	sbic	0x00, 1	; 0
 170:	04 c0       	rjmp	.+8      	; 0x17a <increm_decrem+0xbc>
state = check;
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 178:	08 95       	ret
}
else if (pin2) {
 17a:	80 b1       	in	r24, 0x00	; 0
 17c:	08 95       	ret
state = wait2;
}
break;
case reset:
state = check;
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
break;
 184:	08 95       	ret
default:
state = start;
 186:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
break;
 18a:	08 95       	ret
break;
case check:
break;
case increm:
if (PORTC < 9) {
PORTC = PORTC + 1;
 18c:	88 b1       	in	r24, 0x08	; 8
 18e:	8f 5f       	subi	r24, 0xFF	; 255
 190:	88 b9       	out	0x08, r24	; 8
 192:	08 95       	ret
}
break;
case decrem:
if (PORTC > 0) {
PORTC = PORTC - 1;
 194:	88 b1       	in	r24, 0x08	; 8
 196:	81 50       	subi	r24, 0x01	; 1
 198:	88 b9       	out	0x08, r24	; 8
PORTC = 0x00;
break;
default:
break;
}
}
 19a:	08 95       	ret
case wait:
break;
case wait2:
break;
case reset:
PORTC = 0x00;
 19c:	18 b8       	out	0x08, r1	; 8
 19e:	08 95       	ret

000001a0 <main>:
default:
break;
}
}
int main(void) {
DDRA = 0x00; PORTA = 0xFF; //inputs
 1a0:	11 b8       	out	0x01, r1	; 1
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	82 b9       	out	0x02, r24	; 2
DDRC = 0xFF; PORTC = 0x00; //outputs
 1a6:	87 b9       	out	0x07, r24	; 7
 1a8:	18 b8       	out	0x08, r1	; 8
PORTC = 0x00;
 1aa:	18 b8       	out	0x08, r1	; 8

state = start;
 1ac:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>

while(1) {
increm_decrem();
 1b0:	86 df       	rcall	.-244    	; 0xbe <increm_decrem>
 1b2:	fe cf       	rjmp	.-4      	; 0x1b0 <main+0x10>

000001b4 <__tablejump2__>:
 1b4:	ee 0f       	add	r30, r30
 1b6:	ff 1f       	adc	r31, r31
 1b8:	00 24       	eor	r0, r0
 1ba:	00 1c       	adc	r0, r0
 1bc:	0b be       	out	0x3b, r0	; 59
 1be:	07 90       	elpm	r0, Z+
 1c0:	f6 91       	elpm	r31, Z
 1c2:	e0 2d       	mov	r30, r0
 1c4:	09 94       	ijmp

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
