
jgaff001_lab5_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000900  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000835  00000000  00000000  00000ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b4  00000000  00000000  00001315  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000015cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000416  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f5  00000000  00000000  00001a26  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001b1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	26 c0       	rjmp	.+76     	; 0xe8 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
	return ((x & (0x01 << k)) != 0);
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; //inputs
  9e:	11 b8       	out	0x01, r1	; 1
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	82 b9       	out	0x02, r24	; 2
	DDRB = 0x00; PORTB = 0xFF; //inputs
  a4:	14 b8       	out	0x04, r1	; 4
  a6:	85 b9       	out	0x05, r24	; 5
	DDRC = 0xFF; PORTC = 0x00; //outputs
  a8:	87 b9       	out	0x07, r24	; 7
  aa:	18 b8       	out	0x08, r1	; 8
unsigned char GetBit(unsigned char x, unsigned char k) {
	return ((x & (0x01 << k)) != 0);
}

int main(void)
{
  ac:	20 e0       	ldi	r18, 0x00	; 0
  ae:	30 e0       	ldi	r19, 0x00	; 0
	DDRC = 0xFF; PORTC = 0x00; //outputs
	unsigned char temp = 0x00;

	while(1) {
		unsigned char i; //iterator
		unsigned char bits = 0x00; //total on(1) bits
  b0:	40 e0       	ldi	r20, 0x00	; 0
		for (i = 0; i < 8; i++) {
			temp = PINA;
  b2:	80 b1       	in	r24, 0x00	; 0
//setbit and getbit functions from the lab manual
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char GetBit(unsigned char x, unsigned char k) {
	return ((x & (0x01 << k)) != 0);
  b4:	52 2f       	mov	r21, r18
	while(1) {
		unsigned char i; //iterator
		unsigned char bits = 0x00; //total on(1) bits
		for (i = 0; i < 8; i++) {
			temp = PINA;
			if(GetBit(temp,i)) {
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 2e       	mov	r0, r18
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <main+0x22>
  bc:	95 95       	asr	r25
  be:	87 95       	ror	r24
  c0:	0a 94       	dec	r0
  c2:	e2 f7       	brpl	.-8      	; 0xbc <main+0x1e>
  c4:	80 fd       	sbrc	r24, 0
				bits++;
  c6:	4f 5f       	subi	r20, 0xFF	; 255
			}
			temp = PINB;
  c8:	83 b1       	in	r24, 0x03	; 3
			if(GetBit(temp,i)) {
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <main+0x34>
  ce:	95 95       	asr	r25
  d0:	87 95       	ror	r24
  d2:	5a 95       	dec	r21
  d4:	e2 f7       	brpl	.-8      	; 0xce <main+0x30>
  d6:	80 fd       	sbrc	r24, 0
				bits++;
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	2f 5f       	subi	r18, 0xFF	; 255
  dc:	3f 4f       	sbci	r19, 0xFF	; 255
	unsigned char temp = 0x00;

	while(1) {
		unsigned char i; //iterator
		unsigned char bits = 0x00; //total on(1) bits
		for (i = 0; i < 8; i++) {
  de:	28 30       	cpi	r18, 0x08	; 8
  e0:	31 05       	cpc	r19, r1
  e2:	39 f7       	brne	.-50     	; 0xb2 <main+0x14>
			temp = PINB;
			if(GetBit(temp,i)) {
				bits++;
			}
		}
		PORTC = bits;
  e4:	48 b9       	out	0x08, r20	; 8
	}
  e6:	e2 cf       	rjmp	.-60     	; 0xac <main+0xe>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
